// Health-Member Card Management System Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  OFFICE_AGENT
  HOSPITAL_USER
}

enum CardStatus {
  ACTIVE
  SUSPENDED
  EXPIRED
  CANCELLED
}

enum MemberRelation {
  HEAD
  SPOUSE
  CHILD
  PARENT
  OTHER
}

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String
  passwordHash String
  role         UserRole
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdCards Card[]      @relation("CardCreator")
  updatedCards Card[]      @relation("CardUpdater")
  auditLogs    AuditLog[]
}

model Plan {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String
  price        Decimal  @db.Decimal(10, 2)
  durationDays Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  cards        Card[]
}

model Household {
  id        String    @id @default(cuid())
  headName  String
  address   String
  phone     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   Member[]
  card      Card?
}

model Member {
  id          String         @id @default(cuid())
  firstName   String
  lastName    String
  dob         DateTime
  relation    MemberRelation
  household   Household      @relation(fields: [householdId], references: [id], onDelete: Cascade)
  householdId String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([householdId])
}

model Card {
  id          String     @id @default(cuid())
  household   Household  @relation(fields: [householdId], references: [id], onDelete: Cascade)
  householdId String     @unique
  plan        Plan       @relation(fields: [planId], references: [id])
  planId      String
  status      CardStatus @default(ACTIVE)
  issueDate   DateTime   @default(now())
  expiryDate  DateTime
  createdBy   User       @relation("CardCreator", fields: [createdById], references: [id])
  createdById String
  updatedBy   User       @relation("CardUpdater", fields: [updatedById], references: [id])
  updatedById String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  auditLogs   AuditLog[]

  @@index([planId])
  @@index([createdById])
  @@index([updatedById])
}

model AuditLog {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  card      Card?    @relation(fields: [cardId], references: [id])
  cardId    String?
  action    String
  timestamp DateTime @default(now())
  metadata  Json?

  @@index([userId])
  @@index([cardId])
}